# -*- coding: utf-8 -*-
"""Análise Estatística de Preços de Combustíveis

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1b8MkbCCS-6rPUTFb_a5UKeZVu1OqaAN5
"""

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

# --- Bloco de Funções ---

def carregar_e_limpar_dados(caminho_arquivo):
    """
    Carrega o arquivo Excel, converte a coluna de preços para numérico
    e remove dados inválidos ou nulos.
    """
    try:
        df = pd.read_excel(caminho_arquivo)
    except FileNotFoundError:
        print(f"Erro: Arquivo '{caminho_arquivo}' não encontrado.")
        return None
    except Exception as e:
        print(f"Ocorreu um erro ao ler o arquivo Excel: {e}")
        return None

    # Renomear colunas para remover espaços e caracteres especiais
    df.columns = df.columns.str.strip().str.replace(' - ', '_').str.replace(' ', '_')

    if 'Valor_de_Venda' not in df.columns:
        print("Erro: A coluna 'Valor de Venda' não foi encontrada no arquivo.")
        return None

    df['Valor_de_Venda'] = pd.to_numeric(df['Valor_de_Venda'], errors='coerce')
    df.dropna(subset=['Valor_de_Venda'], inplace=True)
    df = df[df['Valor_de_Venda'] > 0]

    return df


def calcular_estatisticas_descritivas(df, coluna_grupo, coluna_valor):
    """
    Calcula e retorna um DataFrame com as principais estatísticas descritivas
    agrupadas por uma coluna específica.
    """
    produtos_comuns = ['GASOLINA', 'ETANOL', 'DIESEL S10', 'GASOLINA ADITIVADA']
    df_filtrado = df[df[coluna_grupo].isin(produtos_comuns)]

    stats_df = pd.DataFrame()
    grouped = df_filtrado.groupby(coluna_grupo)[coluna_valor]

    stats_df['media'] = grouped.mean()
    stats_df['mediana'] = grouped.median()
    stats_df['moda'] = grouped.apply(lambda x: x.mode().iloc[0] if not x.mode().empty else None)
    stats_df['desvio_padrao'] = grouped.std()
    stats_df['variancia'] = grouped.var()
    stats_df['min'] = grouped.min()
    stats_df['25%'] = grouped.quantile(0.25)
    stats_df['75%'] = grouped.quantile(0.75)
    stats_df['max'] = grouped.quantile(1.0)
    stats_df['assimetria'] = grouped.skew()
    stats_df['curtose'] = grouped.apply(lambda x: x.kurt())  # corrigido

    return stats_df.round(4)


def calcular_matriz_covariancia(df, col_indices, col_pivot, col_valores):
    """
    Calcula e retorna a matriz de covariância para os valores de uma coluna
    pivotada.
    """
    produtos_comuns = ['GASOLINA', 'ETANOL', 'DIESEL S10', 'GASOLINA ADITIVADA']
    df_filtrado = df[df[col_pivot].isin(produtos_comuns)]

    df_pivot = df_filtrado.pivot_table(index=col_indices,
                                       columns=col_pivot,
                                       values=col_valores)
    df_pivot.dropna(inplace=True)

    if len(df_pivot) > 1:
        return df_pivot.cov().round(4)
    else:
        return "Dados insuficientes para calcular a covariância."


def gerar_graficos(df, coluna_grupo, coluna_valor):
    """
    Gera e salva os gráficos de análise (Histograma, Box Plot, Percentil, Assimetria e Curtose).
    """
    produtos_comuns = ['GASOLINA', 'ETANOL', 'DIESEL S10', 'GASOLINA ADITIVADA']
    df_filtrado = df[df[coluna_grupo].isin(produtos_comuns)]

    sns.set_theme(style="whitegrid", palette="viridis")

    # 1. Histograma e Densidade para Gasolina
    plt.figure(figsize=(10, 6))
    sns.histplot(data=df_filtrado[df_filtrado[coluna_grupo] == 'GASOLINA'],
                 x=coluna_valor, kde=True, bins=30)
    plt.title('Distribuição de Preços da Gasolina Comum', fontsize=16)
    plt.xlabel('Valor de Venda (R$ / litro)', fontsize=12)
    plt.ylabel('Frequência', fontsize=12)
    plt.savefig('histograma_gasolina.png')
    plt.show()

    # 2. Box Plot Comparativo
    plt.figure(figsize=(12, 8))
    sns.boxplot(x=coluna_grupo, y=coluna_valor, data=df_filtrado, order=produtos_comuns)
    plt.title('Dispersão dos Preços por Tipo de Combustível', fontsize=16)
    plt.xlabel('Produto', fontsize=12)
    plt.ylabel('Valor de Venda (R$ / litro)', fontsize=12)
    plt.savefig('boxplot_comparativo.png')
    plt.show()

    # 3. Gráfico de Percentil
    plt.figure(figsize=(12, 8))
    for produto in produtos_comuns:
        sns.ecdfplot(data=df_filtrado[df_filtrado[coluna_grupo] == produto],
                     x=coluna_valor, label=produto)
    plt.title('Gráfico de Percentil dos Preços por Tipo de Combustível', fontsize=16)
    plt.xlabel('Valor de Venda (R$ / litro)', fontsize=12)
    plt.ylabel('Percentil', fontsize=12)
    plt.legend()
    plt.savefig('percentil_precos.png')
    plt.show()

    # 4. Gráfico de Assimetria
    skewness_data = df_filtrado.groupby(coluna_grupo)[coluna_valor].skew().reindex(produtos_comuns)
    plt.figure(figsize=(10, 6))
    sns.barplot(x=skewness_data.index, y=skewness_data.values)
    plt.title('Assimetria dos Preços por Tipo de Combustível', fontsize=16)
    plt.xlabel('Produto', fontsize=12)
    plt.ylabel('Assimetria', fontsize=12)
    plt.savefig('assimetria_precos.png')
    plt.show()

    # 5. Gráfico de Curtose
    kurtosis_data = df_filtrado.groupby(coluna_grupo)[coluna_valor].apply(lambda x: x.kurt()).reindex(produtos_comuns)
    plt.figure(figsize=(10, 6))
    sns.barplot(x=kurtosis_data.index, y=kurtosis_data.values)
    plt.title('Curtose dos Preços por Tipo de Combustível', fontsize=16)
    plt.xlabel('Produto', fontsize=12)
    plt.ylabel('Curtose', fontsize=12)
    plt.savefig('curtose_precos.png')
    plt.show()


# --- Execução Principal ---

if __name__ == "__main__":
    arquivo_csv = "Preços_Automotivos_Parana.xlsx"

    dados = carregar_e_limpar_dados(arquivo_csv)

    if dados is not None:
        estatisticas = calcular_estatisticas_descritivas(dados, 'Produto', 'Valor_de_Venda')
        print("--- Análise Descritiva por Produto ---")
        display(estatisticas)
        print("\n" + "="*50 + "\n")

        matriz_cov = calcular_matriz_covariancia(dados,
                                                 ['CNPJ_da_Revenda', 'Data_da_Coleta'],
                                                 'Produto',
                                                 'Valor_de_Venda')
        print("--- Matriz de Covariância entre Preços ---")
        display(matriz_cov)
        print("\n" + "="*50 + "\n")

        print("Gerando gráficos de análise...")
        gerar_graficos(dados, 'Produto', 'Valor_de_Venda')
        print("Gráficos 'histograma_gasolina.png', 'boxplot_comparativo.png', "
              "'percentil_precos.png', 'assimetria_precos.png', e 'curtose_precos.png' salvos no diretório.")

from google.colab import sheets
sheet = sheets.InteractiveSheet(df=estatisticas)

# @title media vs mediana

from matplotlib import pyplot as plt
estatisticas.plot(kind='scatter', x='media', y='mediana', s=32, alpha=.8)
plt.gca().spines[['top', 'right',]].set_visible(False)

# @title media

from matplotlib import pyplot as plt
estatisticas['media'].plot(kind='hist', bins=20, title='media')
plt.gca().spines[['top', 'right',]].set_visible(False)

from google.colab import drive
drive.mount('/content/drive')

